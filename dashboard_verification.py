#!/usr/bin/env python3
"""
Script completo para verifica√ß√£o do Dashboard
Testa estat√≠sticas, gr√°ficos, endpoints e valida√ß√£o de dados
"""
import requests
import json
import time
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000"

def test_login():
    """Fazer login e obter token"""
    login_data = {
        "username": "admin@example.com",
        "password": "admin00"
    }

    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        return None

def test_dashboard_stats(token):
    """Testar estat√≠sticas do dashboard"""
    headers = {"Authorization": f"Bearer {token}"}

    print("üìä Testando estat√≠sticas do dashboard...")

    start_time = time.time()
    response = requests.get(f"{BASE_URL}/api/dashboard/stats", headers=headers)
    response_time = time.time() - start_time

    if response.status_code == 200:
        stats = response.json()
        print(".2f")
        print("  üìà Estat√≠sticas encontradas:")

        # Validar estrutura dos dados
        expected_fields = ['total_imoveis', 'receita_mensal', 'alugueis_ativos',
                          'proprietarios_ativos', 'taxa_ocupacao', 'total_usuarios']

        for field in expected_fields:
            if field in stats:
                value = stats[field]
                print(f"    ‚úÖ {field}: {value}")
            else:
                print(f"    ‚ùå Campo faltando: {field}")

        return stats
    else:
        print(f"‚ùå Erro nas estat√≠sticas: {response.status_code} - {response.text}")
        return None

def test_dashboard_charts(token):
    """Testar dados dos gr√°ficos"""
    headers = {"Authorization": f"Bearer {token}"}

    print("\nüìà Testando dados dos gr√°ficos...")

    start_time = time.time()
    response = requests.get(f"{BASE_URL}/api/dashboard/charts", headers=headers)
    response_time = time.time() - start_time

    if response.status_code == 200:
        charts = response.json()
        print(".2f")
        print("  üìä Gr√°ficos dispon√≠veis:")

        expected_charts = ['receita_por_mes', 'status_imoveis', 'distribuicao_tipos', 'receita_por_proprietario']

        for chart_name in expected_charts:
            if chart_name in charts:
                data = charts[chart_name]
                print(f"    ‚úÖ {chart_name}: {len(data)} registros")
            else:
                print(f"    ‚ùå Gr√°fico faltando: {chart_name}")

        return charts
    else:
        print(f"‚ùå Erro nos gr√°ficos: {response.status_code} - {response.text}")
        return None

def test_dashboard_page():
    """Testar se a p√°gina do dashboard est√° acess√≠vel"""
    print("\nüåê Testando p√°gina do dashboard...")

    response = requests.get(f"{BASE_URL}/dashboard")
    if response.status_code == 200:
        content = response.text
        if "Dashboard" in content and "Estat√≠sticas" in content:
            print("  ‚úÖ P√°gina do dashboard carregada com sucesso")
            return True
        else:
            print("  ‚ùå P√°gina carregada mas conte√∫do parece incompleto")
            return False
    else:
        print(f"‚ùå Erro ao carregar p√°gina: {response.status_code}")
        return False

def generate_report(stats, charts, page_ok):
    """Gerar relat√≥rio final"""
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO FINAL - VERIFICA√á√ÉO DO DASHBOARD")
    print("="*60)

    # Status geral
    print("üéØ STATUS GERAL:")
    if stats and charts and page_ok:
        print("  ‚úÖ Dashboard completamente funcional")
    else:
        print("  ‚ùå Dashboard com problemas")

    # Estat√≠sticas principais
    if stats:
        print("\nüìä ESTAT√çSTICAS PRINCIPAIS:")
        print(f"  ‚Ä¢ Total de im√≥veis: {stats.get('total_imoveis', 'N/A')}")
        print(f"  ‚Ä¢ Receita mensal: R$ {stats.get('receita_mensal', 0):,.2f}")
        print(f"  ‚Ä¢ Alugu√©is ativos: {stats.get('alugueis_ativos', 'N/A')}")
        print(f"  ‚Ä¢ Taxa de ocupa√ß√£o: {stats.get('taxa_ocupacao', 0):.1f}%")
        print(f"  ‚Ä¢ Total de usu√°rios: {stats.get('total_usuarios', 'N/A')}")

    # Gr√°ficos
    if charts:
        print("\nüìà GR√ÅFICOS:")
        chart_info = [
            ('receita_por_mes', 'Receita por m√™s'),
            ('status_imoveis', 'Status dos im√≥veis'),
            ('distribuicao_tipos', 'Distribui√ß√£o por tipo'),
            ('receita_por_proprietario', 'Receita por propriet√°rio')
        ]

        for key, name in chart_info:
            count = len(charts.get(key, []))
            status = "‚úÖ" if count > 0 else "‚ùå"
            print(f"  {status} {name}: {count} registros")

    # Data e hora do teste
    print(f"\nüïí Teste realizado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

    print("="*60)

def main():
    print("üîç INICIANDO VERIFICA√á√ÉO COMPLETA DO DASHBOARD")
    print("="*60)

    # Login
    token = test_login()
    if not token:
        print("‚ùå Imposs√≠vel continuar sem autentica√ß√£o")
        return

    # Testes
    stats = test_dashboard_stats(token)
    charts = test_dashboard_charts(token)
    page_ok = test_dashboard_page()

    # Relat√≥rio final
    generate_report(stats, charts, page_ok)

    # Resumo executivo
    print("\nüéØ RESUMO EXECUTIVO:")
    tests_passed = sum([stats is not None, charts is not None, page_ok])

    if tests_passed == 3:
        print("  ‚úÖ DASHBOARD APROVADO - Todos os sistemas funcionando")
    elif tests_passed >= 1:
        print("  ‚ö†Ô∏è  DASHBOARD COM ALERTAS - Alguns problemas detectados")
    else:
        print("  ‚ùå DASHBOARD COM FALHAS - Requer aten√ß√£o imediata")

if __name__ == "__main__":
    main()