import sys
import os
from sqlalchemy.orm import sessionmaker

# Adiciona o diret√≥rio raiz do projeto ao sys.path
project_root = os.path.abspath(os.path.dirname(__file__))
sys.path.append(project_root)

try:
    from app.models.usuario import Usuario
    from app.core.auth import get_password_hash
    from app.core.database import engine
except ImportError as e:
    print(f"Erro: N√£o foi poss√≠vel importar os m√≥dulos da aplica√ß√£o: {e}")
    sys.exit(1)

def create_admin_user():
    """Cria um usu√°rio administrador padr√£o no banco de dados."""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()

    try:
        # Verificar se j√° existe um admin
        existing_admin = db.query(Usuario).filter(Usuario.tipo == 'administrador').first()
        if existing_admin:
            print("‚úÖ J√° existe um usu√°rio administrador no sistema.")
            print(f"  - Email: {existing_admin.email}")
            print(f"  - Nome: {existing_admin.nome}")
            return

        # Dados do admin padr√£o
        nome = "Administrador"
        email = "admin@alugueis.com"
        password = "admin123"
        username = "admin"

        # Verificar se username j√° existe
        existing_user = db.query(Usuario).filter(Usuario.username == username).first()
        if existing_user:
            print(f"‚ùå Erro: Username '{username}' j√° existe.")
            return

        # Criptografar a senha
        hashed_password = get_password_hash(password)

        # Criar o usu√°rio administrador
        new_admin = Usuario(
            nome=nome,
            email=email,
            username=username,
            hashed_password=hashed_password,
            tipo='administrador',
            ativo=True
        )

        db.add(new_admin)
        db.commit()

        print("‚úÖ Usu√°rio administrador criado com sucesso!")
        print(f"  - Nome: {nome}")
        print(f"  - Email: {email}")
        print(f"  - Username: {username}")
        print(f"  - Senha: {password}")
        print("\nüîê Use essas credenciais para fazer login no sistema.")

    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao criar usu√°rio administrador: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    create_admin_user()