#!/bin/bash

# Script de instala√ß√£o completa para PRODU√á√ÉO
# Sistema de Alugu√©is V4 - Configura√ß√£o de Produ√ß√£o

set -e  # Para o script em caso de erro

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_DIR"

echo "üè≠ INSTALA√á√ÉO DE PRODU√á√ÉO - SISTEMA DE ALUGU√âIS V4"
echo "=================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "app/main.py" ]; then
    echo "‚ùå Erro: Execute este script do diret√≥rio raiz do projeto AlugueisV4"
    exit 1
fi

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Erro: Docker n√£o encontrado. Instale o Docker primeiro."
    echo "   Ubuntu/Debian: sudo apt install docker.io docker-compose"
    echo "   CentOS/RHEL: sudo yum install docker docker-compose"
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo "‚ùå Erro: Docker Compose n√£o encontrado. Instale o Docker Compose primeiro."
    exit 1
fi

echo "üê≥ Docker e Docker Compose detectados"

# Verificar se .env existe
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Copiando .env.example..."
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado. Edite-o com suas configura√ß√µes de produ√ß√£o!"
    echo ""
    echo "IMPORTANTE: Configure as seguintes vari√°veis no .env:"
    echo "  - DATABASE_URL: URL do PostgreSQL de produ√ß√£o"
    echo "  - SECRET_KEY: Chave secreta forte para produ√ß√£o"
    echo "  - ALLOWED_ORIGINS: Dom√≠nios permitidos"
    echo ""
    read -p "Pressione ENTER ap√≥s configurar o .env..."
fi

echo ""
echo "üîß CONFIGURANDO AMBIENTE DE PRODU√á√ÉO"
echo "-------------------------------------"

# Parar containers existentes
echo "  üõë Parando containers existentes..."
docker-compose down || true

# Limpar imagens n√£o utilizadas (opcional)
read -p "Deseja limpar imagens Docker n√£o utilizadas? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "  üßπ Limpando imagens n√£o utilizadas..."
    docker system prune -f
fi

echo ""
echo "üèóÔ∏è  CONSTRUINDO E INICIANDO SERVI√áOS"
echo "-------------------------------------"

# Construir e iniciar servi√ßos
echo "  üì¶ Construindo imagens..."
docker-compose build --no-cache

echo "  üöÄ Iniciando servi√ßos..."
docker-compose up -d

echo "  ‚è≥ Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar se os servi√ßos est√£o rodando
echo "  üîç Verificando status dos servi√ßos..."
if docker-compose ps | grep -q "Up"; then
    echo "  ‚úÖ Servi√ßos iniciados com sucesso!"
else
    echo "  ‚ùå Erro ao iniciar servi√ßos. Verifique os logs:"
    docker-compose logs
    exit 1
fi

echo ""
echo "üóÑÔ∏è  CONFIGURANDO BANCO DE DADOS"
echo "-------------------------------"

# Executar migra√ß√µes dentro do container
echo "  üìã Executando migra√ß√µes do banco..."
if docker-compose exec -T app alembic upgrade head; then
    echo "  ‚úÖ Migra√ß√µes executadas com sucesso!"
else
    echo "  ‚ùå Erro nas migra√ß√µes. Verifique os logs do banco:"
    docker-compose logs db
    exit 1
fi

echo ""
echo "üë§ CRIANDO USU√ÅRIO ADMINISTRADOR"
echo "---------------------------------"

echo "Sugest√£o: admin / admin00"
echo ""

# Pedir dados do administrador
read -p "Nome do administrador: " ADMIN_NOME
read -p "Email do administrador: " ADMIN_EMAIL
read -s -p "Senha do administrador: " ADMIN_PASSWORD
echo
read -s -p "Confirme a senha: " ADMIN_PASSWORD_CONFIRM
echo

# Verificar se senhas coincidem
if [ "$ADMIN_PASSWORD" != "$ADMIN_PASSWORD_CONFIRM" ]; then
    echo "‚ùå Erro: Senhas n√£o coincidem!"
    exit 1
fi

# Verificar se campos est√£o preenchidos
if [ -z "$ADMIN_NOME" ] || [ -z "$ADMIN_EMAIL" ] || [ -z "$ADMIN_PASSWORD" ]; then
    echo "‚ùå Erro: Todos os campos s√£o obrigat√≥rios!"
    exit 1
fi

echo "  üë§ Criando usu√°rio administrador..."

# Executar script dentro do container
if docker-compose exec -T app python3 scripts/create_admin_interactive.py --nome "$ADMIN_NOME" --email "$ADMIN_EMAIL" --password "$ADMIN_PASSWORD"; then
    echo ""
    echo "üéâ INSTALA√á√ÉO DE PRODU√á√ÉO CONCLU√çDA!"
    echo "===================================="
    echo "‚úÖ Servi√ßos Docker configurados"
    echo "‚úÖ Banco de dados PostgreSQL pronto"
    echo "‚úÖ Migra√ß√µes executadas"
    echo "‚úÖ Usu√°rio administrador criado"
    echo ""
    echo "üåê Acesse a aplica√ß√£o:"
    echo "   - URL: Configure seu dom√≠nio/reverse proxy"
    echo "   - Porta interna: 8000"
    echo "   - Login: Use o email e senha configurados"
    echo ""
    echo "üõ†Ô∏è  Comandos √∫teis:"
    echo "   - Ver logs: docker-compose logs -f"
    echo "   - Parar: docker-compose down"
    echo "   - Reiniciar: docker-compose restart"
    echo ""
    echo "üîí CONFIGURA√á√ïES DE SEGURAN√áA:"
    echo "   - Configure HTTPS no reverse proxy"
    echo "   - Mude a SECRET_KEY no .env"
    echo "   - Configure ALLOWED_ORIGINS adequadamente"
    echo "   - Considere usar secrets do Docker"
else
    echo "‚ùå Erro ao criar usu√°rio administrador!"
    echo "   Verifique os logs: docker-compose logs app"
    exit 1
fi
